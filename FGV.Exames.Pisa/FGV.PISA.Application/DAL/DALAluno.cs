//------------------------------------------------------------------------------
// <auto-generated>
//     Este código foi gerado via T4.
//
//     Alterações feitas neste arquivo podem ser perdidas
//     caso o código seja regerado. 
// </auto-generated>
//------------------------------------------------------------------------------
#region [ Diretivas de Using ]
using FGV.PISA.Application.Common;
using Dapper;
using Microsoft.Extensions.Configuration;
using FGV.PISA.Application.Model;
using System;
using System.Data.SqlClient;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
#endregion

namespace FGV.PISA.Application.DAL
{
    public class DALAluno : IAluno
    {
        IConfiguration _configuration;

        private static log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.Assembly.GetEntryAssembly().GetType());

        public DALAluno(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        public string GetConnection()
        {
            var connection = _configuration.GetSection("ConnectionString").GetSection("DefaultConnection").Value;
            return connection;
        }

        public async Task<int> Create(Aluno aluno)
        {
            aluno.Ativo = true;
            try
            {
                var query = @" INSERT INTO [dbo].[Aluno](
													[Codigo],
													[Nome],
													[id_escola],
													[Presente],
													[DataCriacao],
													[DataAtualizacao],
													[Ativo])
													OUTPUT inserted.id
											VALUES (
													@Codigo,
													@Nome,
													@id_escola,
													@Presente,
													@DataCriacao,
													@DataAtualizacao,
													@Ativo)";
                using (var sqlConnection = new SqlConnection(this.GetConnection()))
                {
                    var model = await sqlConnection.QueryAsync<int>(query, aluno);
                    return model.FirstOrDefault();
                }

            }
            catch (Exception ex)
            {
                log.Error(ex);
                return -1;
            }

        }

        public async void Update(Aluno aluno)
        {
            aluno.DataAtualizacao = DateTime.Now;
            try
            {
                var query = @" UPDATE [dbo].[Aluno] SET 
													[Codigo] = @Codigo,
													[Nome] = @Nome,
													[id_escola] = @id_escola,
													[Presente] = @Presente,
													[DataCriacao] = @DataCriacao,
													[DataAtualizacao] = @DataAtualizacao,
													[Ativo] = @Ativo
											WHERE [Id] = @Id ";
                using (var sqlConnection = new SqlConnection(this.GetConnection()))
                {
                    var model = await sqlConnection.ExecuteAsync(query, aluno);
                }

            }
            catch (Exception ex)
            {
                log.Error(ex);
            }

        }

        public async void Delete(int Id)
        {
            try
            {
                var query = @" UPDATE [dbo].[Aluno] SET 
													[Ativo] =  0
											WHERE [Id] = @Id ";
                using (var sqlConnection = new SqlConnection(this.GetConnection()))
                {
                    var model = await sqlConnection.ExecuteAsync(query, new { Id });
                }

            }
            catch (Exception ex)
            {
                log.Error(ex);
            }

        }

        public async Task<Aluno> GetById(int Id)
        {
            try
            {
                var query = @" SELECT
									[id],
									[Codigo],
									[Nome],
									[id_escola],
									[Presente],
									[DataCriacao],
									[DataAtualizacao],
									[Ativo]
								FROM [dbo].[Aluno]
								WHERE [Id] = @Id ";
                using (var sqlConnection = new SqlConnection(this.GetConnection()))
                {
                    var model = await sqlConnection.QueryFirstAsync<Aluno>(query, new { Id });
                    return model;
                }

            }
            catch (Exception ex)
            {
                log.Error(ex);
                return null;
            }

        }

        public async Task<List<Aluno>> GetByEscola(int IdEscola)
        {
            try
            {
                var query = @" SELECT
									[Id],
									[Codigo],
									[Nome],
									[id_escola],
									[Presente],
									[DataCriacao],
									[DataAtualizacao],
									[Ativo]
								FROM [dbo].[Aluno]
								WHERE [id_escola] = @IdEscola ";
                using (var sqlConnection = new SqlConnection(this.GetConnection()))
                {
                    var model = await sqlConnection.QueryAsync<Aluno>(query, new { IdEscola });
                    return model.ToList();
                }

            }
            catch (Exception ex)
            {
                log.Error(ex);
                return null;
            }

        }

        public async Task<List<Aluno>> GetByEscolaListaPresenca(int IdEscola)
        {
            try
            {
                var query = @" SELECT
                                A.[Id],
                                A.[Codigo],
                                A.[Nome],
                                A.[id_escola],
                                L.[Presente],
                                A.[DataCriacao],
                                A.[DataAtualizacao],
                                A.[Ativo]
                                FROM [dbo].[Aluno] A
                                LEFT JOIN [dbo].[ListaPresenca] L ON L.AlunoId = A.Id
                                WHERE [id_escola] = @IdEscola AND A.Ativo = 1 ";
                using (var sqlConnection = new SqlConnection(this.GetConnection()))
                {
                    var model = await sqlConnection.QueryAsync<Aluno>(query, new { IdEscola });
                    return model.ToList();
                }

            }
            catch (Exception ex)
            {
                log.Error(ex);
                return null;
            }

        }

        public async Task<Aluno> GetHierarchy(int Id)
        {
            try
            {
                var query = @" SELECT
									[Aluno].[id],
									[Aluno].[Codigo],
									[Aluno].[Nome],
									[Aluno].[id_escola],
									[Aluno].[Presente],
									[Aluno].[DataCriacao],
									[Aluno].[DataAtualizacao],
									[Aluno].[Ativo],
									[id_escola].[Id],
									[id_escola].[Codigo],
									[id_escola].[Nome],
									[id_escola].[DataCriacao],
									[id_escola].[DataAtualizacao],
									[id_escola].[Ativo]
								FROM [dbo].[Aluno]
								JOIN [dbo].[Escola] id_escola
								ON [dbo].[Aluno].[id_escola] = id_escola.[Id]
								WHERE [dbo].[Aluno].[id]  = @Id ";
                using (var sqlConnection = new SqlConnection(this.GetConnection()))
                {
                    var model = await sqlConnection.QueryAsync<Aluno, Escola, Aluno>(query,
                                                            (Aluno, id_escola) =>
                                                            {
                                                                Aluno.Escola = id_escola;
                                                                return Aluno;
                                                            },
                                                            new { Id });
                    return model.FirstOrDefault();
                }

            }
            catch (Exception ex)
            {
                log.Error(ex);
                return null;
            }

        }

        public async Task<Aluno> GetByCodigoEscola(string codigo, int IdEscola)
        {
            try
            {
                var query = @" SELECT
									[Id],
									[Codigo],
									[Nome],
									[id_escola],
									[Presente],
									[DataCriacao],
									[DataAtualizacao],
									[Ativo]
								FROM [dbo].[Aluno]
								WHERE [Codigo] = @codigo and [id_escola]= @IdEscola";
                using (var sqlConnection = new SqlConnection(this.GetConnection()))
                {
                    var model = await sqlConnection.QueryFirstAsync<Aluno>(query, new { codigo, IdEscola });
                    return model;
                }

            }
            catch (Exception ex)
            {
                log.Error(ex);
                return null;
            }

        }

        public List<Aluno> BuscarTodosAlunos()
        {
            var query = @" SELECT * FROM [dbo].[Aluno]
								WHERE [Ativo] = 1";

            using (var sqlConnection = new SqlConnection(this.GetConnection()))
            {
                var model = sqlConnection.Query<Aluno>(query).ToList();
                return model;
            }
        }

        public bool InserirPresenca(List<Aluno> alunos)
        {
            var query = @"INSERT INTO [dbo].[ListaPresenca] (AlunoId, Presente) VALUES (@Id, 1)";

            using (var sqlConnection = new SqlConnection(this.GetConnection()))
            {
                var model = sqlConnection.Execute(query, alunos);
                return alunos.Count == model;
            }

        }

    }

}
