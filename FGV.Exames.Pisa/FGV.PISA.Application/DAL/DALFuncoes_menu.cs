//------------------------------------------------------------------------------
// <auto-generated>
//     Este código foi gerado via T4.
//
//     Alterações feitas neste arquivo podem ser perdidas
//     caso o código seja regerado. 
// </auto-generated>
//------------------------------------------------------------------------------
#region [ Diretivas de Using ]
using FGV.PISA.Application.Common;
using Dapper;
using Microsoft.Extensions.Configuration;
using FGV.PISA.Application.Model;
using System;
using System.Data.SqlClient;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
#endregion

namespace FGV.PISA.Application.DAL
{
	public class DALFuncoes_menu : IFuncoes_menu
	{
		IConfiguration _configuration;
	
		private static log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.Assembly.GetEntryAssembly().GetType());
	
		public DALFuncoes_menu(IConfiguration configuration)
		{
			_configuration = configuration;
		}

		public string GetConnection()
		{
			var connection = _configuration.GetSection("ConnectionString").GetSection("DefaultConnection").Value;
			return connection;
		}

		public async Task<int> Create(Funcoes_menu funcoes_menu)
		{
			funcoes_menu.Ativo = true;
			try
			{
				var query = @" INSERT INTO [dbo].[Funcoes_menu](
													[exames_pisa_id],
													[funcao_id],
													[menu_id],
													[DataCriacao],
													[DataAtualizacao],
													[Ativo],
													[data_inicio_vigencia],
													[data_fin_vigencia],
													[data_vira_so_leitura])
													OUTPUT inserted.id
											VALUES (
													@exames_pisa_id,
													@funcao_id,
													@menu_id,
													@DataCriacao,
													@DataAtualizacao,
													@Ativo,
													@data_inicio_vigencia,
													@data_fin_vigencia,
													@data_vira_so_leitura)";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryAsync<int>(query, funcoes_menu);
					return model.FirstOrDefault();
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return -1;
			}

		}

		public async void Update(Funcoes_menu funcoes_menu)
		{
			funcoes_menu.DataAtualizacao = DateTime.Now;
			try
			{
				var query = @" UPDATE [dbo].[Funcoes_menu] SET 
													[exames_pisa_id] = @exames_pisa_id,
													[funcao_id] = @funcao_id,
													[menu_id] = @menu_id,
													[DataCriacao] = @DataCriacao,
													[DataAtualizacao] = @DataAtualizacao,
													[Ativo] = @Ativo,
													[data_inicio_vigencia] = @data_inicio_vigencia,
													[data_fin_vigencia] = @data_fin_vigencia,
													[data_vira_so_leitura] = @data_vira_so_leitura
											WHERE [Id] = @Id ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.ExecuteAsync(query, funcoes_menu);
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
			}

		}

		public async void Delete(int Id)
		{
			try
			{
				var query = @" UPDATE [dbo].[Funcoes_menu] SET 
													[Ativo] =  0
											WHERE [Id] = @Id ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.ExecuteAsync(query, new {Id});
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
			}

		}

		public async Task<Funcoes_menu> GetById(int Id)
		{
			try
			{
				var query = @" SELECT
									[id],
									[exames_pisa_id],
									[funcao_id],
									[menu_id],
									[DataCriacao],
									[DataAtualizacao],
									[Ativo],
									[data_inicio_vigencia],
									[data_fin_vigencia],
									[data_vira_so_leitura]
								FROM [dbo].[Funcoes_menu]
								WHERE [Id] = @Id ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryFirstAsync<Funcoes_menu>(query, new {Id});
					return model;
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return null;
			}

		}

		public async Task<List<Funcoes_menu>> GetByExames_pisa (int IdExames_pisa)
		{
			try
			{
				var query = @" SELECT
									[id],
									[exames_pisa_id],
									[funcao_id],
									[menu_id],
									[DataCriacao],
									[DataAtualizacao],
									[Ativo],
									[data_inicio_vigencia],
									[data_fin_vigencia],
									[data_vira_so_leitura]
								FROM [dbo].[Funcoes_menu]
								WHERE [IdExames_pisa] = @IdExames_pisa ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryAsync<Funcoes_menu>(query, new {IdExames_pisa});
					return model.ToList();
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return null;
			}

		}

		public async Task<List<Funcoes_menu>> GetByFuncoes (int IdFuncoes)
		{
			try
			{
				var query = @" SELECT
									[id],
									[exames_pisa_id],
									[funcao_id],
									[menu_id],
									[DataCriacao],
									[DataAtualizacao],
									[Ativo],
									[data_inicio_vigencia],
									[data_fin_vigencia],
									[data_vira_so_leitura]
								FROM [dbo].[Funcoes_menu]
								WHERE [IdFuncoes] = @IdFuncoes ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryAsync<Funcoes_menu>(query, new {IdFuncoes});
					return model.ToList();
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return null;
			}

		}

		public async Task<List<Funcoes_menu>> GetByMenu (int IdMenu)
		{
			try
			{
				var query = @" SELECT
									[id],
									[exames_pisa_id],
									[funcao_id],
									[menu_id],
									[DataCriacao],
									[DataAtualizacao],
									[Ativo],
									[data_inicio_vigencia],
									[data_fin_vigencia],
									[data_vira_so_leitura]
								FROM [dbo].[Funcoes_menu]
								WHERE [IdMenu] = @IdMenu ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryAsync<Funcoes_menu>(query, new {IdMenu});
					return model.ToList();
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return null;
			}

		}

		public async Task<Funcoes_menu> GetHierarchy (int Id)
		{
			try
			{
				var query = @" SELECT
									[Funcoes_menu].[id],
									[Funcoes_menu].[exames_pisa_id],
									[Funcoes_menu].[funcao_id],
									[Funcoes_menu].[menu_id],
									[Funcoes_menu].[DataCriacao],
									[Funcoes_menu].[DataAtualizacao],
									[Funcoes_menu].[Ativo],
									[Funcoes_menu].[data_inicio_vigencia],
									[Funcoes_menu].[data_fin_vigencia],
									[Funcoes_menu].[data_vira_so_leitura],
									[exames_pisa_id].[id],
									[exames_pisa_id].[Descricao],
									[exames_pisa_id].[Ano],
									[exames_pisa_id].[DataCriacao],
									[exames_pisa_id].[DataAtualizacao],
									[exames_pisa_id].[Ativo]
									[funcao_id].[id],
									[funcao_id].[nome],
									[funcao_id].[descricao],
									[funcao_id].[DataCriacao],
									[funcao_id].[DataAtualizacao],
									[funcao_id].[Ativo]
									[menu_id].[id],
									[menu_id].[code],
									[menu_id].[nome],
									[menu_id].[nome_exibicao],
									[menu_id].[pai_id],
									[menu_id].[posicao],
									[menu_id].[icone],
									[menu_id].[ativo],
									[menu_id].[action],
									[menu_id].[controller],
									[menu_id].[url],
									[menu_id].[dataCriacao],
									[menu_id].[dataAtualizacao]
								FROM [dbo].[Funcoes_menu]
								JOIN [dbo].[Exames_pisa] exames_pisa_id
								ON [dbo].[Funcoes_menu].[exames_pisa_id] = exames_pisa_id.[id]
								JOIN [dbo].[Funcoes] funcao_id
								ON [dbo].[Funcoes_menu].[funcao_id] = funcao_id.[id]
								JOIN [dbo].[Menu] menu_id
								ON [dbo].[Funcoes_menu].[menu_id] = menu_id.[id]
								WHERE [dbo].[Funcoes_menu].[id]  = @Id ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryAsync<Funcoes_menu,Exames_pisa,Funcoes,Menu,Funcoes_menu>(query,
															(Funcoes_menu,exames_pisa_id,funcao_id,menu_id) => 
															{
																Funcoes_menu.Exames_pisa = exames_pisa_id;
																Funcoes_menu.Funcoes = funcao_id;
																Funcoes_menu.Menu = menu_id;
																return Funcoes_menu;
															},
															new {Id });
					return model.FirstOrDefault();
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return null;
			}

		}

	}

}
