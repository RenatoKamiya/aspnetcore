//------------------------------------------------------------------------------
// <auto-generated>
//     Este código foi gerado via T4.
//
//     Alterações feitas neste arquivo podem ser perdidas
//     caso o código seja regerado. 
// </auto-generated>
//------------------------------------------------------------------------------
#region [ Diretivas de Using ]
using FGV.PISA.Application.Common;
using Dapper;
using Microsoft.Extensions.Configuration;
using FGV.PISA.Application.Model;
using System;
using System.Data.SqlClient;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
#endregion

namespace FGV.PISA.Application.DAL
{
	public class DALArquivos : IArquivos
	{
		IConfiguration _configuration;
	
		private static log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.Assembly.GetEntryAssembly().GetType());
	
		public DALArquivos(IConfiguration configuration)
		{
			_configuration = configuration;
		}

		public string GetConnection()
		{
			var connection = _configuration.GetSection("ConnectionString").GetSection("DefaultConnection").Value;
			return connection;
		}

		public async Task<int> Create(Arquivos arquivos)
		{
			arquivos.Ativo = true;
			try
			{
				var query = @" INSERT INTO [dbo].[Arquivos](
													[id_Resultado],
													[NomeArquivo],
													[URLArquivo],
													[Pais],
													[Regiao],
													[Estrato],
													[Escola],
													[Estudante],
													[DataCriacao],
													[DataAtualizacao],
													[Ativo])
													OUTPUT inserted.id
											VALUES (
													@id_Resultado,
													@NomeArquivo,
													@URLArquivo,
													@Pais,
													@Regiao,
													@Estrato,
													@Escola,
													@Estudante,
													@DataCriacao,
													@DataAtualizacao,
													@Ativo)";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryAsync<int>(query, arquivos);
					return model.FirstOrDefault();
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return -1;
			}

		}

		public async void Update(Arquivos arquivos)
		{
			arquivos.DataAtualizacao = DateTime.Now;
			try
			{
				var query = @" UPDATE [dbo].[Arquivos] SET 
													[id_Resultado] = @id_Resultado,
													[NomeArquivo] = @NomeArquivo,
													[URLArquivo] = @URLArquivo,
													[Pais] = @Pais,
													[Regiao] = @Regiao,
													[Estrato] = @Estrato,
													[Escola] = @Escola,
													[Estudante] = @Estudante,
													[DataCriacao] = @DataCriacao,
													[DataAtualizacao] = @DataAtualizacao,
													[Ativo] = @Ativo
											WHERE [Id] = @Id ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.ExecuteAsync(query, arquivos);
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
			}

		}

		public async void Delete(int Id)
		{
			try
			{
				var query = @" UPDATE [dbo].[Arquivos] SET 
													[Ativo] =  0
											WHERE [Id] = @Id ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.ExecuteAsync(query, new {Id});
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
			}

		}

		public async Task<Arquivos> GetById(int Id)
		{
			try
			{
				var query = @" SELECT
									[id],
									[id_Resultado],
									[NomeArquivo],
									[URLArquivo],
									[Pais],
									[Regiao],
									[Estrato],
									[Escola],
									[Estudante],
									[DataCriacao],
									[DataAtualizacao],
									[Ativo]
								FROM [dbo].[Arquivos]
								WHERE [Id] = @Id ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryFirstAsync<Arquivos>(query, new {Id});
					return model;
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return null;
			}

		}

		public async Task<List<Arquivos>> GetByResultado (int IdResultado)
		{
			try
			{
				var query = @" SELECT
									[id],
									[id_Resultado],
									[NomeArquivo],
									[URLArquivo],
									[Pais],
									[Regiao],
									[Estrato],
									[Escola],
									[Estudante],
									[DataCriacao],
									[DataAtualizacao],
									[Ativo]
								FROM [dbo].[Arquivos]
								WHERE [IdResultado] = @IdResultado ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryAsync<Arquivos>(query, new {IdResultado});
					return model.ToList();
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return null;
			}

		}

		public async Task<Arquivos> GetHierarchy (int Id)
		{
			try
			{
				var query = @" SELECT
									[Arquivos].[id],
									[Arquivos].[id_Resultado],
									[Arquivos].[NomeArquivo],
									[Arquivos].[URLArquivo],
									[Arquivos].[Pais],
									[Arquivos].[Regiao],
									[Arquivos].[Estrato],
									[Arquivos].[Escola],
									[Arquivos].[Estudante],
									[Arquivos].[DataCriacao],
									[Arquivos].[DataAtualizacao],
									[Arquivos].[Ativo],
									[id_resultado].[id],
									[id_resultado].[Data_Envio],
									[id_resultado].[Data_Avaliacao],
									[id_resultado].[Turno],
									[id_resultado].[id_usuario],
									[id_resultado].[id_aluno],
									[id_resultado].[exames_pisa_id],
									[id_resultado].[DataCriacao],
									[id_resultado].[DataAtualizacao],
									[id_resultado].[Ativo]
								FROM [dbo].[Arquivos]
								JOIN [dbo].[Resultado] id_resultado
								ON [dbo].[Arquivos].[id_resultado] = id_resultado.[id]
								WHERE [dbo].[Arquivos].[id]  = @Id ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryAsync<Arquivos,Resultado,Arquivos>(query,
															(Arquivos,id_resultado) => 
															{
																Arquivos.Resultado = id_resultado;
																return Arquivos;
															},
															new {Id });
					return model.FirstOrDefault();
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return null;
			}

		}

	}

}
