//------------------------------------------------------------------------------
// <auto-generated>
//     Este código foi gerado via T4.
//
//     Alterações feitas neste arquivo podem ser perdidas
//     caso o código seja regerado. 
// </auto-generated>
//------------------------------------------------------------------------------
#region [ Diretivas de Using ]
using FGV.PISA.Application.Common;
using Dapper;
using Microsoft.Extensions.Configuration;
using FGV.PISA.Application.Model;
using System;
using System.Data.SqlClient;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
#endregion

namespace FGV.PISA.Application.DAL
{
	public class DALMenu : IMenu
	{
		IConfiguration _configuration;
	
		private static log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.Assembly.GetEntryAssembly().GetType());
	
		public DALMenu(IConfiguration configuration)
		{
			_configuration = configuration;
		}

		public string GetConnection()
		{
			var connection = _configuration.GetSection("ConnectionString").GetSection("DefaultConnection").Value;
			return connection;
		}

		public async Task<int> Create(Menu menu)
		{
			menu.Ativo = true;
			try
			{
				var query = @" INSERT INTO [dbo].[Menu](
													[code],
													[nome],
													[nome_exibicao],
													[pai_id],
													[posicao],
													[icone],
													[ativo],
													[action],
													[controller],
													[url],
													[dataCriacao],
													[dataAtualizacao])
													OUTPUT inserted.id
											VALUES (
													@code,
													@nome,
													@nome_exibicao,
													@pai_id,
													@posicao,
													@icone,
													@ativo,
													@action,
													@controller,
													@url,
													@dataCriacao,
													@dataAtualizacao)";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryAsync<int>(query, menu);
					return model.FirstOrDefault();
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return -1;
			}

		}

		public async void Update(Menu menu)
		{
			menu.DataAtualizacao = DateTime.Now;
			try
			{
				var query = @" UPDATE [dbo].[Menu] SET 
													[code] = @code,
													[nome] = @nome,
													[nome_exibicao] = @nome_exibicao,
													[pai_id] = @pai_id,
													[posicao] = @posicao,
													[icone] = @icone,
													[ativo] = @ativo,
													[action] = @action,
													[controller] = @controller,
													[url] = @url,
													[dataCriacao] = @dataCriacao,
													[dataAtualizacao] = @dataAtualizacao
											WHERE [Id] = @Id ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.ExecuteAsync(query, menu);
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
			}

		}

		public async void Delete(int Id)
		{
			try
			{
				var query = @" UPDATE [dbo].[Menu] SET 
													[Ativo] =  0
											WHERE [Id] = @Id ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.ExecuteAsync(query, new {Id});
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
			}

		}

		public async Task<Menu> GetById(int Id)
		{
			try
			{
				var query = @" SELECT
									[id],
									[code],
									[nome],
									[nome_exibicao],
									[pai_id],
									[posicao],
									[icone],
									[ativo],
									[action],
									[controller],
									[url],
									[dataCriacao],
									[dataAtualizacao]
								FROM [dbo].[Menu]
								WHERE [Id] = @Id ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryFirstAsync<Menu>(query, new {Id});
					return model;
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return null;
			}

		}

		public IEnumerable<Menu> GetMenus(int idExame, int idFuncao)
		{
			try
			{
				
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = sqlConnection.Query<Menu>("dbo.PR_SEL_FUNCOES_MENU @ID_CONCURSO, @ID_FUNCAO"
					, new
					{
						ID_CONCURSO = idExame,
						ID_FUNCAO = idFuncao
					});
					return model;
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return null;
			}

		}

	}

}
