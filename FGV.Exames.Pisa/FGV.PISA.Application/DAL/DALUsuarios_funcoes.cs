//------------------------------------------------------------------------------
// <auto-generated>
//     Este código foi gerado via T4.
//
//     Alterações feitas neste arquivo podem ser perdidas
//     caso o código seja regerado. 
// </auto-generated>
//------------------------------------------------------------------------------
#region [ Diretivas de Using ]
using FGV.PISA.Application.Common;
using Dapper;
using Microsoft.Extensions.Configuration;
using FGV.PISA.Application.Model;
using System;
using System.Data.SqlClient;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
#endregion

namespace FGV.PISA.Application.DAL
{
	public class DALUsuarios_funcoes : IUsuarios_funcoes
	{
		IConfiguration _configuration;
	
		private static log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.Assembly.GetEntryAssembly().GetType());
	
		public DALUsuarios_funcoes(IConfiguration configuration)
		{
			_configuration = configuration;
		}

		public string GetConnection()
		{
			var connection = _configuration.GetSection("ConnectionString").GetSection("DefaultConnection").Value;
			return connection;
		}

		public async Task<int> Create(Usuarios_funcoes usuarios_funcoes)
		{
			usuarios_funcoes.Ativo = true;
			try
			{
				var query = @" INSERT INTO [dbo].[Usuarios_funcoes](
													[DataCriacao],
													[DataAtualizacao],
													[Ativo])
													OUTPUT inserted.id
											VALUES (
													@DataCriacao,
													@DataAtualizacao,
													@Ativo)";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryAsync<int>(query, usuarios_funcoes);
					return model.FirstOrDefault();
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return -1;
			}

		}

		public async void Update(Usuarios_funcoes usuarios_funcoes)
		{
			usuarios_funcoes.DataAtualizacao = DateTime.Now;
			try
			{
				var query = @" UPDATE [dbo].[Usuarios_funcoes] SET 
													[DataCriacao] = @DataCriacao,
													[DataAtualizacao] = @DataAtualizacao,
													[Ativo] = @Ativo
											WHERE [Id] = @Id ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.ExecuteAsync(query, usuarios_funcoes);
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
			}

		}

		public async void Delete(int Id)
		{
			try
			{
				var query = @" UPDATE [dbo].[Usuarios_funcoes] SET 
													[Ativo] =  0
											WHERE [Id] = @Id ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.ExecuteAsync(query, new {Id});
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
			}

		}

		public async Task<Usuarios_funcoes> GetById(int Id)
		{
			try
			{
				var query = @" SELECT
									[id],
									[usuario_id],
									[funcao_id],
									[exames_pisa_id],
									[DataCriacao],
									[DataAtualizacao],
									[Ativo]
								FROM [dbo].[Usuarios_funcoes]
								WHERE [Id] = @Id ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryFirstAsync<Usuarios_funcoes>(query, new {Id});
					return model;
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return null;
			}

		}

		public async Task<Usuarios_funcoes> GetByIdUsuario(int IdUsuario)
		{
			try
			{
				var query = @" SELECT
									[Usuarios_funcoes].[id],
									[Usuarios_funcoes].[usuario_id],
									[Usuarios_funcoes].[funcao_id],
									[Usuarios_funcoes].[exames_pisa_id],
									[Usuarios_funcoes].[DataCriacao],
									[Usuarios_funcoes].[DataAtualizacao],
									[Usuarios_funcoes].[Ativo],
									[Funcoes].[id],
									[Funcoes].[nome],
									[Funcoes].[descricao],
									[Funcoes].[DataCriacao],
									[Funcoes].[DataAtualizacao],
									[Funcoes].[Ativo],
									[Exames_pisa].[id],
									[Exames_pisa].[Descricao],
									[Exames_pisa].[Ano],
									[Exames_pisa].[DataCriacao],
									[Exames_pisa].[DataAtualizacao],
									[Exames_pisa].[Ativo]
								FROM [dbo].[Usuarios_funcoes]
								JOIN [dbo].[Funcoes]
									ON [dbo].[Usuarios_funcoes].[funcao_id] = [dbo].[Funcoes].[Id]  
								JOIN  [dbo].[Exames_pisa]
									ON [dbo].[Usuarios_funcoes].[exames_pisa_id] = [dbo].[Exames_pisa].[Id] and [dbo].[Exames_pisa].[Ativo] = 1
								WHERE [Usuarios_funcoes].[usuario_id] = @IdUsuario 
										and [Funcoes].[Ativo] = 1 
										and [Usuarios_funcoes].[Ativo] = 1";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryAsync<Usuarios_funcoes, Funcoes, Exames_pisa, Usuarios_funcoes >(query,
						(Usuarios_funcoes, Funcoes, Exames_pisa) =>
						{
							Usuarios_funcoes.Funcao = Funcoes;
							Usuarios_funcoes.Exames_Pisa = Exames_pisa;
							return Usuarios_funcoes;
						}, new { IdUsuario }); 
					return model.FirstOrDefault();
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return null;
			}
		}
	}

}
