//------------------------------------------------------------------------------
// <auto-generated>
//     Este código foi gerado via T4.
//
//     Alterações feitas neste arquivo podem ser perdidas
//     caso o código seja regerado. 
// </auto-generated>
//------------------------------------------------------------------------------
#region [ Diretivas de Using ]
using FGV.PISA.Application.Common;
using Dapper;
using Microsoft.Extensions.Configuration;
using FGV.PISA.Application.Model;
using System;
using System.Data.SqlClient;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Globalization;
#endregion

namespace FGV.PISA.Application.DAL
{
	public class DALResultado : IResultado
	{
		IConfiguration _configuration;
	
		private static log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.Assembly.GetEntryAssembly().GetType());
	
		public DALResultado(IConfiguration configuration)
		{
			_configuration = configuration;
		}

		public string GetConnection()
		{
			var connection = _configuration.GetSection("ConnectionString").GetSection("DefaultConnection").Value;
			return connection;
		}

		public async Task<int> Create(Resultado resultado)
		{
			resultado.Ativo = true;
			try
			{
				var query = @" INSERT INTO [dbo].[Resultado](
													[Data_Envio],
													[Data_Avaliacao],
													[Turno],
													[id_usuario],
													[id_aluno],
													[exames_pisa_id],
													[DataCriacao],
													[DataAtualizacao],
													[Ativo])
													OUTPUT inserted.id
											VALUES (
													@Data_Envio,
													@Data_Avaliacao,
													@Turno,
													@id_usuario,
													@id_aluno,
													@exames_pisa_id,
													@DataCriacao,
													@DataAtualizacao,
													@Ativo)";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryAsync<int>(query, resultado);
					return model.FirstOrDefault();
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return -1;
			}

		}

		public async void Update(Resultado resultado)
		{
			resultado.DataAtualizacao = DateTime.Now;
			try
			{
				var query = @" UPDATE [dbo].[Resultado] SET 
													[Data_Envio] = @Data_Envio,
													[Data_Avaliacao] = @Data_Avaliacao,
													[Turno] = @Turno,
													[id_usuario] = @id_usuario,
													[id_aluno] = @id_aluno,
													[exames_pisa_id] = @exames_pisa_id,
													[DataCriacao] = @DataCriacao,
													[DataAtualizacao] = @DataAtualizacao,
													[Ativo] = @Ativo
											WHERE [Id] = @Id ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.ExecuteAsync(query, resultado);
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
			}

		}

		public async void Delete(int Id)
		{
			try
			{
				var query = @" UPDATE [dbo].[Resultado] SET 
													[Ativo] =  0
											WHERE [Id] = @Id ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.ExecuteAsync(query, new {Id});
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
			}

		}

		public async Task<Resultado> GetById(int Id)
		{
			try
			{
				var query = @" SELECT
									[id],
									[Data_Envio],
									[Data_Avaliacao],
									[Turno],
									[id_usuario],
									[id_aluno],
									[exames_pisa_id],
									[DataCriacao],
									[DataAtualizacao],
									[Ativo]
								FROM [dbo].[Resultado]
								WHERE [Id] = @Id ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryFirstAsync<Resultado>(query, new {Id});
					return model;
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return null;
			}

		}

		public async Task<List<Resultado>> GetByAluno (int IdAluno)
		{
			try
			{
				var query = @" SELECT
									[id],
									[Data_Envio],
									[Data_Avaliacao],
									[Turno],
									[id_usuario],
									[id_aluno],
									[exames_pisa_id],
									[DataCriacao],
									[DataAtualizacao],
									[Ativo]
								FROM [dbo].[Resultado]
								WHERE [IdAluno] = @IdAluno ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryAsync<Resultado>(query, new {IdAluno});
					return model.ToList();
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return null;
			}

		}

		public async Task<List<Resultado>> GetByExames_pisa (int IdExames_pisa)
		{
			try
			{
				var query = @" SELECT
									[id],
									[Data_Envio],
									[Data_Avaliacao],
									[Turno],
									[id_usuario],
									[id_aluno],
									[exames_pisa_id],
									[DataCriacao],
									[DataAtualizacao],
									[Ativo]
								FROM [dbo].[Resultado]
								WHERE [IdExames_pisa] = @IdExames_pisa ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryAsync<Resultado>(query, new {IdExames_pisa});
					return model.ToList();
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return null;
			}

		}

		public async Task<List<Resultado>> GetByUsuario (int IdUsuario)
		{
			try
			{
				var query = @" SELECT
									[id],
									[Data_Envio],
									[Data_Avaliacao],
									[Turno],
									[id_usuario],
									[id_aluno],
									[exames_pisa_id],
									[DataCriacao],
									[DataAtualizacao],
									[Ativo]
								FROM [dbo].[Resultado]
								WHERE [IdUsuario] = @IdUsuario ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryAsync<Resultado>(query, new {IdUsuario});
					return model.ToList();
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return null;
			}

		}

		public async Task<Resultado> GetHierarchy (int Id)
		{
			try
			{
				var query = @" SELECT
									[Resultado].[id],
									[Resultado].[Data_Envio],
									[Resultado].[Data_Avaliacao],
									[Resultado].[Turno],
									[Resultado].[id_usuario],
									[Resultado].[id_aluno],
									[Resultado].[exames_pisa_id],
									[Resultado].[DataCriacao],
									[Resultado].[DataAtualizacao],
									[Resultado].[Ativo],
									[id_aluno].[id],
									[id_aluno].[Codigo],
									[id_aluno].[Nome],
									[id_aluno].[id_escola],
									[id_aluno].[Presente],
									[id_aluno].[DataCriacao],
									[id_aluno].[DataAtualizacao],
									[id_aluno].[Ativo]
									[exames_pisa_id].[id],
									[exames_pisa_id].[Descricao],
									[exames_pisa_id].[Ano],
									[exames_pisa_id].[DataCriacao],
									[exames_pisa_id].[DataAtualizacao],
									[exames_pisa_id].[Ativo]
									[id_usuario].[Id],
									[id_usuario].[Nome],
									[id_usuario].[Cpf],
									[id_usuario].[Email],
									[id_usuario].[Telefone],
									[id_usuario].[id_escola],
									[id_usuario].[Senha],
									[id_usuario].[DataCriacao],
									[id_usuario].[DataAtualizacao],
									[id_usuario].[Ativo]
								FROM [dbo].[Resultado]
								JOIN [dbo].[Aluno] id_aluno
								ON [dbo].[Resultado].[id_aluno] = id_aluno.[id]
								JOIN [dbo].[Exames_pisa] exames_pisa_id
								ON [dbo].[Resultado].[exames_pisa_id] = exames_pisa_id.[id]
								JOIN [dbo].[Usuario] id_usuario
								ON [dbo].[Resultado].[id_usuario] = id_usuario.[Id]
								WHERE [dbo].[Resultado].[id]  = @Id ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryAsync<Resultado,Aluno,Exames_pisa,Usuario,Resultado>(query,
															(Resultado,id_aluno,exames_pisa_id,id_usuario) => 
															{
																Resultado.Aluno = id_aluno;
																Resultado.Exames_pisa = exames_pisa_id;
																Resultado.Usuario = id_usuario;
																return Resultado;
															},
															new {Id });
					return model.FirstOrDefault();
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return null;
			}

		}


		public async Task<ResultadoPaginado<RelResultadoExames>> GetResultadosExames(int exames_pisa_id, int id_usuario, int id_escola, int id_aluno, DateTime? DataInicial, DateTime? DataFinal)
        {
			ResultadoPaginado<RelResultadoExames> retorno = new ResultadoPaginado<RelResultadoExames>();
			retorno.ListRegistros = new List<RelResultadoExames>();
			try
			{
				var query = @" SELECT ROW_NUMBER() OVER (ORDER BY CAST(GETDATE() AS TIMESTAMP)) AS [id]
									  ,[aluno]
									  ,[Escola]
									  ,[Usuario]
									  ,[Data_Envio]
									  ,[NomeArquivo]
									  , COUNT(*) OVER() [total]
								  FROM [dbo].[ExamesEnviado] 
									where 1=1 ";

				if (exames_pisa_id > 0)
					query += $"and exames_pisa_id = {exames_pisa_id} ";
				if (id_usuario > 0)
					query += $"and id_usuario = {id_usuario} ";
				if (id_escola > 0)
					query += $"and id_escola = {id_escola} ";
				if (id_aluno > 0)
					query += $"and id_aluno = {id_aluno} ";
				if(DataInicial != null)                
					query += $"and CAST(Data_Envio as DATE) >= '{DataInicial?.Year}/{DataInicial?.Month}/{DataInicial?.Day}' ";
				if (DataFinal != null)
					query += $"and CAST(Data_Envio as DATE) <= '{DataFinal?.Year}/{DataFinal?.Month}/{DataFinal?.Day}' ";

				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryAsync<RelResultadoExames>(query);
					retorno.ListRegistros = model.ToList();
					retorno.TotalRegistrosRetornados = retorno.ListRegistros[0].Total;
					return retorno;
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return null;
			 }
		}

	}

}
