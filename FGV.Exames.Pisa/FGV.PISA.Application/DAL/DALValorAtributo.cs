//------------------------------------------------------------------------------
// <auto-generated>
//     Este código foi gerado via T4.
//
//     Alterações feitas neste arquivo podem ser perdidas
//     caso o código seja regerado. 
// </auto-generated>
//------------------------------------------------------------------------------
#region [ Diretivas de Using ]
using FGV.PISA.Application.Common;
using Dapper;
using Microsoft.Extensions.Configuration;
using FGV.PISA.Application.Model;
using System;
using System.Data.SqlClient;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using FGV.PISA.Application.Helpers;
using System.Collections.Specialized;
#endregion

namespace FGV.PISA.Application.DAL
{
	public class DALValorAtributo : IValorAtributo
	{
		IConfiguration _configuration;
	
		private static log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.Assembly.GetEntryAssembly().GetType());
	
		public DALValorAtributo(IConfiguration configuration)
		{
			_configuration = configuration;
		}

		public string GetConnection()
		{
			var connection = _configuration.GetSection("ConnectionString").GetSection("DefaultConnection").Value;
			return connection;
		}

		public async Task<ValorAtributo> GetByChave(string Chave)
		{
			try
			{
				var query = @" SELECT
									[Id],
									[Chave],
									[Valor]
								FROM [dbo].[ValorAtributo]
								WHERE [Chave] = @Chave ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryFirstAsync<ValorAtributo>(query, new { Chave });
					return model;
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return null;
			}

		}

		public async Task<NameValueCollection> GetByChaveList(List<string> Chaves)
		{
			try
			{
				var query = @" SELECT
									[Id],
									[Chave],
									[Valor]
								FROM [dbo].[ValorAtributo]
								WHERE [Chave] in  @LstChaves ";
				using (var sqlConnection = new SqlConnection(this.GetConnection()))
				{
					var model = await sqlConnection.QueryAsync<ValorAtributo>(query, new { LstChaves = BancoDados.GetAnsiStrings(Chaves) });

					NameValueCollection KV_List = new NameValueCollection();
					foreach(var item in model)
                    {
						KV_List.Add(item.Chave, item.Valor);

					}

					return KV_List;
				}

			}
			catch (Exception ex)
			{
				log.Error(ex);
				return null;
			}

		}

	}

}
